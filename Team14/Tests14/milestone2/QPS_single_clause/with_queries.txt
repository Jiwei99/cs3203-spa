1. procedure.procName = procedure.procName
procedure p, p1;
Select p with p.procName = p1.procName
call, print
5000
2 - procedure.procName = call.procName
procedure p; call c;
Select c.procName with c.procName = p.procName
print
5000
3 - procedure.procName = variable.varName
procedure p; variable v;
Select v with v.varName = p.procName
call, print
5000
4 - procedure.procName = read.varName
procedure p; read r;
Select r with p.procName = r.varName
10
5000
5 - procedure.procName = print.varName
procedure p; print pn; variable v;
Select v with p.procName = pn.varName
read, x, y, a, b, call, k, print
5000
6 - procedure.procName = IDENT
procedure p;
Select p with p.procName = "CALL"
none
5000
7 - call.procName = call.procName
call c, c1;
Select c with c.procName = c1.procName
1
5000
8 - call.procName = variable.varName
call c; variable v;
Select v.varName with v.varName = c.procName
print
5000
9 - call.procName = read.varName
call c; read r;
Select r.varName with c.procName = r.varName
print
5000
10 - call.procName = print.varName
call c; print pn, pn2;
Select pn2 with c.procName = pn.varName
none
5000
11 - call.procName = IDENT
call c;
Select c with c.procName = "print"
1
5000
12 - variable.varName = variable.varName
variable v, v1;
Select v with v.varName = v1.varName
read, x, y, a, b, call, k, print
5000
13 - variable.varName = read.varName
variable v; read r;
Select r with v.varName = r.varName
2, 9 ,10
5000
14 - variable.varName = print.varName
variable v; print pn, pn2;
Select pn2 with v.varName = pn.varName
4, 5, 6
5000
15 - variable.varName = IDENT
variable v;
Select v with v.varName = "a"
a
5000
16 - read.varName = read.varName
read r;
Select r with r.varName = r.varName
2, 9, 10
5000
17 - read.varName = print.varName
read r; print pn;
Select r with r.varName = pn.varName
none
5000
18 - read.varName = IDENT
read r, r1;
Select r1 with r.varName = "k"
2, 9, 10
5000
19 - print.varName = print.varName
print pn; print pn1;
Select pn1.varName with pn.varName = pn1.varName
a, b, call
5000
20 - print.varName = IDENT
print pn;
Select pn with pn.varName = "call"
6
5000
21 - IDENT = IDENT
procedure with;
Select with.procName with "x" = "x"
call, print
5000
22 - IDENT = IDENT
procedure with;
Select with with "x" = "x"
call, print
5000
23 - constant.value = constant.value
constant c, c1;
Select c.value with c.value = c1.value
1, 2, 3, 4, 7, 8, 100
5000
24 - constant.value = stmt.stmt#
constant c; stmt s;
Select s.stmt# with c.value = s.stmt#
1, 2, 3, 4,7, 8
5000
25 - constant.value = read.stmt#
constant c; read r;
Select r.varName with c.value = r.stmt#
read
5000
26 - constant.value = read.stmt#
constant c; read r;
Select r.stmt# with c.value = r.stmt#
2
5000
27 - constant.value = print.stmt#
constant c; print pn;
Select pn.varName with c.value = pn.stmt#
a
5000
28 - constant.value = print.stmt#
constant c; print pn;
Select pn.stmt# with c.value = pn.stmt#
4
5000
29 - constant.value = call.stmt#
constant c; call c1;
Select c1.procName with c.value = c1.stmt#
print
5000
30 - constant.value = call.stmt#
constant c; call c1;
Select c1.stmt# with c.value = c1.stmt#
1
5000
31 - constant.value = while.stmt#
constant c; while w;
Select w.stmt# with c.value = w.stmt#
8
5000
32 - constant.value = if.stmt#
constant c; if ifs;
Select ifs.stmt# with c.value = ifs.stmt#
3
5000
33 - constant.value = assign.stmt#
constant c; assign a;
Select a.stmt# with c.value = a.stmt#
7
5000
34 - constant.value = INTEGER
constant c;
Select c.value with c.value = 1
1
5000
35 - constant.value = INTEGER
constant c;
Select c with c.value = 100
100
5000
36 - stmt.stmt# = stmt.stmt#
stmt s, s1;
Select s with s.stmt# = s1.stmt#
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
5000
37 - stmt.stmt# = read.stmt#
stmt s; read r;
Select r with s.stmt# = r.stmt#
2, 9, 10
5000
38 - stmt.stmt# = print.stmt#
stmt s; print pn;
Select pn with s.stmt# = pn.stmt#
4, 5, 6
5000
39 - stmt.stmt# = call.stmt#
stmt s; call c;
Select s with s.stmt# = c.stmt#
1
5000
40 - stmt.stmt# = while.stmt#
stmt s; while w;
Select w with s.stmt# = w.stmt#
8
5000
41 - stmt.stmt# = if.stmt#
stmt s; if ifs;
Select ifs with s.stmt# = ifs.stmt#
3
5000
42 - stmt.stmt# = assign.stmt#
stmt s; assign a;
Select a with s.stmt# = a.stmt#
7
5000
43 - stmt.stmt# = INTEGER
stmt s, s1;
Select s1 with s.stmt# = 1
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
5000
44 - read.stmt# = read.stmt#
read r, r1;
Select r with r.stmt# = r1.stmt#
2, 9, 10
5000
45 - read.stmt# = read.stmt#
read r;
Select r.varName with r.stmt# = r.stmt#
read, k, print
5000
46 - read.stmt# = print.stmt#
read r; print pn;
Select pn with r.stmt# = pn.stmt#
none
5000
47 - read.stmt# = call.stmt#
read r; call c;
Select c with r.stmt# = c.stmt#
none
5000
48 - read.stmt# = while.stmt#
read r; while w;
Select w with r.stmt# = w.stmt#
none
5000
49 - read.stmt# = if.stmt#
read r; if ifs;
Select ifs with r.stmt# = ifs.stmt#
none
5000
50 - read.stmt# = assign.stmt#
read r; assign a;
Select a with r.stmt# = a.stmt#
none
5000
51 - read.stmt# = INTEGER
read r;
Select r.varName with r.stmt# = 10
print
5000
52 - print.stmt# = print.stmt#
print pn;
Select pn with pn.stmt# = pn.stmt#
4, 5, 6
5000
53 - print.stmt# = print.stmt#
print pn, pn1;
Select pn with pn.stmt# = pn1.stmt#
4, 5, 6
5000
54 - print.stmt# = call.stmt#
print pn; call c;
Select c with pn.stmt# = c.stmt#
none
5000
55 - print.stmt# = while.stmt#
print pn; while w;
Select w with pn.stmt# = w.stmt#
none
5000
56 - print.stmt# = if.stmt#
print pn; if ifs;
Select ifs with pn.stmt# = ifs.stmt#
none
5000
57 - print.stmt# = assign.stmt#
print pn; assign a;
Select a with pn.stmt# = a.stmt#
none
5000
58 - print.stmt# = INTEGER
print pn;
Select pn with pn.stmt# = 10
none
5000
59 - call.stmt# = call.stmt#
call c, c1;
Select c with c.stmt# = c1.stmt#
1
5000
60 - call.stmt# = while.stmt#
call c; while w;
Select w with c.stmt# = w.stmt#
none
5000
61 - call.stmt# = if.stmt#
call c; if ifs;
Select ifs with c.stmt# = ifs.stmt#
none
5000
62 - call.stmt# = assign.stmt#
call c; assign a;
Select c with c.stmt# = a.stmt#
none
5000
63 - call.stmt# = INTEGER
call BOOLEAN;
Select BOOLEAN with BOOLEAN.stmt# = 1
1
5000
64 - while.stmt# = while.stmt#
while w, w1;
Select w with w.stmt# = w1.stmt#
8
5000
65 - while.stmt# = if.stmt#
while w; if ifs;
Select ifs with ifs.stmt# = w.stmt#
none
5000
66 - while.stmt# = assign.stmt#
while w; assign a;
Select w with a.stmt# = w.stmt# 
none
5000
67 - while.stmt# = INTEGER
while w;
Select w with w.stmt# = 8
8
5000
68 - if.stmt# = if.stmt#
if ifs, ifs1;
Select ifs with ifs.stmt# = ifs1.stmt#
3
5000
69 - if.stmt# = assign.stmt#
if ifs; assign a;
Select ifs with ifs.stmt# = a.stmt#
none
5000
70 - if.stmt# = INTEGER
if ifs;
Select ifs.stmt# with ifs.stmt# = 3
3
5000
71 - assign.stmt# = assign.stmt#
assign a, a1;
Select a with a.stmt# = a1.stmt#
7
5000
72 - assign.stmt# = assign.stmt#
assign a;
Select a with a.stmt# = a.stmt#
7
5000
73 - assign.stmt# = INTEGER
assign a;
Select a with a.stmt# = 7
7
5000
74 - assign.stmt# = INTEGER
assign a;
Select a with a.stmt# = 1
none
5000
75 - INEGER = INTEGER
stmt s;
Select s with 1 = 1
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
5000
76 - INEGER = INTEGER
stmt s;
Select s with 1 = 2
none
5000
77 - SemanticError (Wrong attr): procedure.varName
procedure p;
Select p.varName
SemanticError
5000
78 - SemanticError (Wrong attr): procedure.stmt#
procedure p;
Select p with p.stmt# = 1
SemanticError
5000
78.1 - SemanticError (Wrong attr): procedure.stmt#
procedure p;
Select p.stmt#
SemanticError
5000
79 - SemanticError (Wrong attr): procedure.value
procedure p;
Select p.value
SemanticError
5000
80 - SemanticError (Wrong attr): call.varName
call c;
Select c.varName
SemanticError
5000
81 - SemanticError (Wrong attr): call.value
call c;
Select c with c.value = 2
SemanticError
5000
81.1 - SemanticError (Wrong attr): call.value
call c;
Select c.value
SemanticError
5000
82 - SemanticError (Wrong attr): variable.procName
variable v;
Select v with v.procName = "x"
SemanticError
5000
82.1 - SemanticError (Wrong attr): variable.procName
variable v;
Select v.procName
SemanticError
5000
83 - SemanticError (Wrong attr): variable.value
variable v;
Select v.value
SemanticError
5000
84 - SemanticError (Wrong attr): read.procName
read r;
Select r with r.procName = "read"
SemanticError
5000
84.1 - SemanticError (Wrong attr): read.procName
read r;
Select r.procName
SemanticError
5000
85 - SemanticError (Wrong attr): read.value
read r;
Select r.value
SemanticError
5000
86 - SemanticError (Wrong attr): print.procName
print pn;
Select pn with pn.procName = "a"
SemanticError
5000
86.1 - SemanticError (Wrong attr): print.procName
print pn;
Select pn.procName
SemanticError
5000
87 - SemanticError (Wrong attr): print.value
print pn;
Select pn.value
SemanticError
5000
88 - SemanticError (Wrong attr): if.procName
if if;
Select if with if.procName = "x"
SemanticError
5000
88.1 - SemanticError (Wrong attr): if.procName
if if;
Select if.procName
SemanticError
5000
89 - SemanticError (Wrong attr): if.varName
if if;
Select if.varName
SemanticError
5000
90 - SemanticError (Wrong attr): if.value
if if;
Select if with if.value = 10
SemanticError
5000
90.1 - SemanticError (Wrong attr): if.value
if if;
Select if.value
SemanticError
5000
91 - SemanticError (Wrong attr): while.procName
while w;
Select w with w.procName = "x"
SemanticError
5000
91.1 - SemanticError (Wrong attr): while.procName
while w;
Select w.procName
SemanticError
5000
92 - SemanticError (Wrong attr): while.varName
while w;
Select w with w.varName = "x"
SemanticError
5000
92.1 - SemanticError (Wrong attr): while.varName
while w;
Select w.varName
SemanticError
5000
93 - SemanticError (Wrong attr): while.value
while w;
Select w with w.value = 10
SemanticError
5000
93.1 - SemanticError (Wrong attr): while.value
while w;
Select w.value
SemanticError
5000
94 - SemanticError (Wrong attr): assign.procName
assign a;
Select a with a.procName = "print"
SemanticError
5000
94.1 - SemanticError (Wrong attr): assign.procName
assign a;
Select a.procName
SemanticError
5000
95 - SemanticError (Wrong attr): assign.varName
assign a;
Select a with a.varName = "x"
SemanticError
5000
95.1 - SemanticError (Wrong attr): assign.varName
assign a;
Select a.varName
SemanticError
5000
96 - SemanticError (Wrong attr): assign.value
assign a;
Select a with a.value = 10
SemanticError
5000
96.1 - SemanticError (Wrong attr): assign.value
assign a;
Select a.value
SemanticError
5000
97 - SemanticError (Wrong attr): constant.procName
constant c;
Select c with c.procName = "print"
SemanticError
5000
97.1 - SemanticError (Wrong attr): constant.procName
constant c;
Select c.procName
SemanticError
5000
98 - SemanticError (Wrong attr): constant.varName
constant c;
Select c with c.varName = "x"
SemanticError
5000
98.1 - SemanticError (Wrong attr): constant.varName
constant c;
Select c.varName
SemanticError
5000
99 - SemanticError (Wrong attr): constant.stmt#
constant c;
Select c with c.stmt# = 1
SemanticError
5000
99.1 - SemanticError (Wrong attr): constant.stmt#
constant c;
Select c.stmt#
SemanticError
5000
100 - SemanticError (Wrong attr): stmt.procName
stmt s;
Select s with s.procName = "print"
SemanticError
5000
100.1 - SemanticError (Wrong attr): stmt.procName
stmt s;
Select s.procName
SemanticError
5000
101 - SemanticError (Wrong attr): stmt.varName
stmt s;
Select s with s.varName = "k"
SemanticError
5000
101.1 - SemanticError (Wrong attr): stmt.varName
stmt s;
Select s.varName with 1 = 1
SemanticError
5000
102 - SemanticError (Wrong attr): stmt.value
stmt s;
Select s with s.value = 10
SemanticError
5000
102.1 - SemanticError (Wrong attr): stmt.value
stmt s;
Select s.value with "k" = "k"
SemanticError
5000
103 - SemanticError (Wrong comparison): procedure.proName = constant.value
procedure p; constant c;
Select c with p.procName = c.value
SemanticError
5000
104 - SemanticError (Wrong comparison): call.procName = stmt.stmt#
call c; stmt s;
Select s with c.procName = s.stmt#
SemanticError
5000
105 - SemanticError (Wrong comparison): variable.varName = read.stmt#
variable v; read r;
Select r with v.varName = r.stmt#
SemanticError
5000
106 - SemanticError (Wrong comparison): read.varName = print.stmt#
read r; print pn;
Select pn with r.varName = pn.stmt#
SemanticError
5000
107 - SemanticError (Wrong comparison): print.varName = call.stmt#
print pn; call c;
Select c with pn.varName = c.stmt#
SemanticError
5000
108 - SemanticError (Wrong comparison): variable.varName = while.stmt#
variable v; while w;
Select w with v.varName = w.stmt#
SemanticError
5000
109 - SemanticError (Wrong comparison): read.varName = if.stmt#
read r; if ifs;
Select ifs with r.varName = ifs.stmt#
SemanticError
5000
110 - SemanticError (Wrong comparison): print.varName = assign.stmt#
print pn; assign a;
Select a with pn.varName = a.stmt#
SemanticError
5000
111 - SemanticError (Wrong comparison): print.varName = INTEGER
print pn;
Select pn with pn.varName = 1
SemanticError
5000
112 - SemanticError (Wrong comparison): if.stmt# = NAME
if ifs;
Select ifs with if.stmt# = "a3"
SemanticError
5000
113 - SyntaxError: if.stmt# = NAME/IDENT (but IDENT Cannot start with a number)
if ifs;
Select ifs with if.stmt# = "3"
SyntaxError
5000